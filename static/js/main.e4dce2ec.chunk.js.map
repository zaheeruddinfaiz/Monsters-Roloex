{"version":3,"sources":["components/card/card.component.jsx","components/card-list/cardlist.component.jsx","components/title/title.component.jsx","components/search/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","alt","src","monster","id","name","email","CardList","monsters","map","key","toString","Title","title","Search","placeholder","handleChange","type","onChange","App","handeleChnage","e","setState","searchfield","target","value","state","fetch","mode","headers","response","json","this","filteredMonsters","filter","toLowerCase","includes","Fragment","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"6VAEaA,G,YAAO,SAAAC,GAClB,OACE,yBAAKC,UAAU,kBACb,yBACEC,IAAI,8BACJC,IAAG,+BAA0BH,EAAMI,QAAQC,GAAxC,4BAEL,4BAAKL,EAAMI,QAAQE,MACnB,2BAAIN,EAAMI,QAAQG,UCNXC,EAAW,SAAAR,GACtB,OACE,yBAAKC,UAAU,aACZD,EAAMS,SAASC,KACd,SAAAN,GAAO,OACLA,EAAQC,IACN,kBAAC,EAAD,CAAMM,IAAKP,EAAQC,GAAGO,WAAYR,QAASA,SCT1CS,EAAQ,SAAAb,GACnB,OAAO,4BAAKA,EAAMc,QCAPC,EAAS,SAAC,GAAmC,IAAjCC,EAAgC,EAAhCA,YAAaC,EAAmB,EAAnBA,aACpC,OACE,4BACE,2BACEC,KAAK,SACLF,YAAaA,EACbG,SAAUF,MCsCHG,G,kBAvCb,aAAe,IAAD,8BACZ,+CAgBFC,cAAgB,SAAAC,GACd,EAAKC,SAAS,CAAEC,YAAaF,EAAEG,OAAOC,SAhBtC,EAAKC,MAAQ,CACXlB,SAAU,GACVe,YAAa,IAJH,E,mNAQWI,MAAM,6CAA8C,CACzEC,KAAM,OACNC,QAAS,CACP,8BAA+B,O,cAH7BC,E,gBAMaA,EAASC,O,OAAtBA,E,OACNC,KAAKV,SAAS,CAAEd,SAAUuB,I,qIAKlB,IAAD,EAC2BC,KAAKN,MAA/BlB,EADD,EACCA,SAAUe,EADX,EACWA,YACZU,EAAmBzB,EAAS0B,QAAO,SAAA/B,GAAO,OAC9CA,EAAQE,KAAK8B,cAAcC,SAASb,MAGtC,OACE,kBAAC,IAAMc,SAAP,KACE,kBAAC,EAAD,CAAOxB,MAAM,qBACb,kBAAC,EAAD,CACEE,YAAY,sBACZC,aAAcgB,KAAKZ,gBAErB,kBAAC,EAAD,CAAUZ,SAAUyB,S,GAlCVK,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD6H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.e4dce2ec.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./card.style.css\";\nexport const Card = props => {\n  return (\n    <div className=\"card-container\">\n      <img\n        alt=\"Horrible Monster is Comming\"\n        src={`https://robohash.org/${props.monster.id}?set=set2&size=180x180`}\n      ></img>\n      <h2>{props.monster.name}</h2>\n      <p>{props.monster.email}</p>\n    </div>\n  );\n};\n","import React from \"react\";\nimport \"./card-list.style.css\";\nimport { Card } from \"../card/card.component\";\n\nexport const CardList = props => {\n  return (\n    <div className=\"card-list\">\n      {props.monsters.map(\n        monster =>\n          monster.id && (\n            <Card key={monster.id.toString()} monster={monster}></Card>\n          )\n      )}\n    </div>\n  );\n};\n","import React from \"react\";\nexport const Title = props => {\n  return <h1>{props.title}</h1>;\n};\n","import React from \"react\";\n\nexport const Search = ({ placeholder, handleChange }) => {\n  return (\n    <h1>\n      <input\n        type=\"search\"\n        placeholder={placeholder}\n        onChange={handleChange}\n      ></input>\n    </h1>\n  );\n};\n","import React from \"react\";\nimport { CardList } from \"./components/card-list/cardlist.component\";\nimport { Title } from \"./components/title/title.component\";\nimport { Search } from \"./components/search/search.component\";\nimport \"./App.css\";\n\nclass App extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      monsters: [],\n      searchfield: \"\"\n    };\n  }\n  async componentDidMount() {\n    const response = await fetch(\"https://jsonplaceholder.typicode.com/users\", {\n      mode: \"cors\",\n      headers: {\n        \"Access-Control-Allow-Origin\": \"*\"\n      }\n    });\n    const json = await response.json();\n    this.setState({ monsters: json });\n  }\n  handeleChnage = e => {\n    this.setState({ searchfield: e.target.value });\n  };\n  render() {\n    const { monsters, searchfield } = this.state;\n    const filteredMonsters = monsters.filter(monster =>\n      monster.name.toLowerCase().includes(searchfield)\n    );\n\n    return (\n      <React.Fragment>\n        <Title title=\"Monsters Rolodex\"></Title>\n        <Search\n          placeholder=\"Search for monsters\"\n          handleChange={this.handeleChnage}\n        ></Search>\n        <CardList monsters={filteredMonsters}></CardList>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}